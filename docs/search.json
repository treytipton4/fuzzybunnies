[{"path":"~fuzzybunnies/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 fuzzybunnies authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"~fuzzybunnies/articles/Candy_Vignette.html","id":"vignette-using-the-dataframe-candydata","dir":"Articles","previous_headings":"","what":"Vignette using the dataframe candydata","title":"Candy Vignette","text":"dataframe shows preferred Halloween candy. data comes survey reached 8,371 people pitted different candies 269,000 rounds. win percent column comes , data based characteristics, price, amount sugar. found website https://fivethirtyeight.com/videos/-ultimate-halloween-candy-power-ranking/ #Introducing ggplot2 ggplot2 package based “Grammar Graphics.” provides easy way present data based variables aesthetics tell ggplot2 use. use ggplot, start ggplot(), add data set , begin add layers code telling kind aesthetic looking . #Creating bar plot  bar chart, can tell Reese’s Peanut Butter Cup favorite Halloween Candy according study. #Basic Regression Analysis sugar content candy relation win percent? can linear regression tell us relationship two.  model use significance value p = 0.05 null hypothesis relationship sugar content win percent. Looking results model p-value 0.0349, can reject null hypothesis claim two variables relationship. However, looking multiple R-squared corresponding graph, can see model lot variability around regression line sugar content explaining variance dependent variable. , can add variables model see ones contribute highest win percentage. #Seeing Characteristic Effect  Looking graph Estimates, can see chocolate highest contribution higher win percent almost 20%. can also see crispedricewafer, fruity, peanutyalmondy also higher contribution others. Candy hard least favorite characteristic. data can helpful wondering kids like Halloween, even business looking enter candy industry. #Conclusion ggplot simple use plenty helpful information internet. recommend ggplot just starting get familiar R statistical analysis. overly complicated can help create helpful, good looking graphs. many intuitive tools compared graphics packages R, however, makes lack simplicity ability user friendly.","code":"candydata <- read_csv('https://raw.githubusercontent.com/fivethirtyeight/data/master/candy-power-ranking/candy-data.csv') #> Rows: 85 Columns: 13 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): competitorname #> dbl (12): chocolate, fruity, caramel, peanutyalmondy, nougat, crispedricewaf... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(candydata) #> # A tibble: 6 × 13 #>   competitor…¹ choco…² fruity caramel peanu…³ nougat crisp…⁴  hard   bar pluri…⁵ #>   <chr>          <dbl>  <dbl>   <dbl>   <dbl>  <dbl>   <dbl> <dbl> <dbl>   <dbl> #> 1 100 Grand          1      0       1       0      0       1     0     1       0 #> 2 3 Musketeers       1      0       0       0      1       0     0     1       0 #> 3 One dime           0      0       0       0      0       0     0     0       0 #> 4 One quarter        0      0       0       0      0       0     0     0       0 #> 5 Air Heads          0      1       0       0      0       0     0     0       0 #> 6 Almond Joy         1      0       0       1      0       0     0     1       0 #> # … with 3 more variables: sugarpercent <dbl>, pricepercent <dbl>, #> #   winpercent <dbl>, and abbreviated variable names ¹​competitorname, #> #   ²​chocolate, ³​peanutyalmondy, ⁴​crispedricewafer, ⁵​pluribus library(ggplot2) #organize data acsendwin <- candydata %>%   arrange(desc(winpercent)) %>%   slice(1:10)  #Create Top 10 Candies Bar Chart   ggplot(data=acsendwin, aes(x=competitorname, y=winpercent)) +   geom_bar(stat = \"Identity\", fill = \"Blue\")+ theme_minimal() +   theme(axis.text.x = element_text(angle = 90)) +   xlab(\"Candy Type\") + ylab(\"Win Percent\") +   ggtitle(\"Top 10 Candies\") #Create the Model sugartest <- lm(winpercent ~ sugarpercent, data = candydata) print(summary(sugartest)) #>  #> Call: #> lm(formula = winpercent ~ sugarpercent, data = candydata) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -24.924 -11.066  -1.168   9.252  36.851  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept)    44.609      3.086  14.455   <2e-16 *** #> sugarpercent   11.924      5.560   2.145   0.0349 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 14.41 on 83 degrees of freedom #> Multiple R-squared:  0.05251,    Adjusted R-squared:  0.04109  #> F-statistic:   4.6 on 1 and 83 DF,  p-value: 0.0349  #Plot the Model ggplot(candydata,aes(sugarpercent, winpercent)) +   geom_point() +   geom_smooth(method='lm') +   xlab(\"Sugar Percent\") + ylab(\"Win Percent\") +   ggtitle(\"Regression\") #> `geom_smooth()` using formula = 'y ~ x' #Create the New Model with Extra Variables sigtest <- glm(winpercent ~ sugarpercent + chocolate + fruity + caramel + peanutyalmondy + nougat + crispedricewafer + hard + bar + pluribus, data = candydata) coef <- tidy(sigtest, conf.int = TRUE) coef #> # A tibble: 11 × 7 #>    term             estimate std.error statistic  p.value conf.low conf.high #>    <chr>               <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> #>  1 (Intercept)         33.3       4.16     8.00  1.31e-11    25.1     41.4   #>  2 sugarpercent         7.49      4.42     1.69  9.44e- 2    -1.18    16.2   #>  3 chocolate           19.2       3.87     4.96  4.30e- 6    11.6     26.8   #>  4 fruity               9.59      3.76     2.55  1.29e- 2     2.21    17.0   #>  5 caramel              1.98      3.65     0.542 5.89e- 1    -5.18     9.14  #>  6 peanutyalmondy       9.45      3.57     2.65  9.96e- 3     2.45    16.5   #>  7 nougat               1.92      5.63     0.341 7.34e- 1    -9.11    12.9   #>  8 crispedricewafer     8.64      5.27     1.64  1.05e- 1    -1.69    19.0   #>  9 hard                -5.87      3.45    -1.70  9.31e- 2   -12.6      0.891 #> 10 bar                 -1.23      4.82    -0.256 7.99e- 1   -10.7      8.21  #> 11 pluribus            -1.15      3.03    -0.378 7.06e- 1    -7.09     4.79  #Plot the New Model ggplot(coef, aes(term, estimate)) +   geom_point() +    geom_pointrange(aes(ymin = conf.low, ymax = conf.high)) +    theme(axis.text.x = element_text(angle = 90)) +   ggtitle(\"Value Added to Win\") +   scale_fill_grey() +   xlab(\"Estimate\") + ylab(\"Type\")"},{"path":"~fuzzybunnies/articles/fuzzybunnies_vignette.html","id":"how-to-use-the-fuzzybunnies","dir":"Articles","previous_headings":"","what":"How to use the fuzzybunnies","title":"fuzzybunnies","text":"R package contains function called df_apply expects dataframe, function, filter, like : df_apply(.data, .fun, .filter, …). useful like perform R command apply one multiple columns data frame. can also filter dataframe columns like perform command . example, want round numbers data frame also columns strings (thus want apply round function numeric columns), something like : df_apply(your_data, round, .numeric). (…) function allows input rest .fun expectations wish ; example , wanted round two digits, : df_apply(your_data, round, .numeric, digits = 2).","code":""},{"path":"~fuzzybunnies/articles/fuzzybunnies_vignette.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"fuzzybunnies","text":"Example 1: increment function adds 5 value, applied numeric columns . Thus, Name column remains Age column’s value go 5 using  function df_apply(). Example 2: example applies existing R command, floor(), xyz dataframe - applying numeric columns. floor function rounds numbers nearest integer, thus, using df_apply(), y z columns remain x column changed values 1, 2, 3.","code":"increment <- function(x) {   x <- x + 5 }  head(df_fuzzybunnies) #>    Name Age #> 1   Jon  23 #> 2  Bill  41 #> 3 Maria  32 #> 4   Ben  58 #> 5  Tina  26 new_df <- df_apply(df_fuzzybunnies, increment, is.numeric)  head(new_df) #>    Name Age #> 1   Jon  28 #> 2  Bill  46 #> 3 Maria  37 #> 4   Ben  63 #> 5  Tina  31 head(xyz_fuzzybunnies) #>     x y     z #> 1 1.1 4 Hello #> 2 2.5 5    Hi #> 3 3.9 6   Hey new_xyz <- df_apply(xyz_fuzzybunnies, floor, is.numeric)  head(new_xyz) #>   x y     z #> 1 1 4 Hello #> 2 2 5    Hi #> 3 3 6   Hey"},{"path":"~fuzzybunnies/articles/trey-graphics-package.html","id":"plotly-graphics-package","dir":"Articles","previous_headings":"","what":"plotly Graphics Package","title":"trey-graphics-package","text":"","code":"library(plotly) #>  #> Attaching package: 'plotly' #> The following object is masked from 'package:ggplot2': #>  #>     last_plot #> The following object is masked from 'package:stats': #>  #>     filter #> The following object is masked from 'package:graphics': #>  #>     layout"},{"path":"~fuzzybunnies/articles/trey-graphics-package.html","id":"how-it-works","dir":"Articles","previous_headings":"plotly Graphics Package","what":"How It Works","title":"trey-graphics-package","text":"plotly graphics package, can used R python powered JavaScript library plotly.js, enables create interactive graphics. helpful able look values specific data points, exact count variable bar chart, exact values median quartiles boxplots, etc. Using plotly fairly simple works similarly graphics packages; fact, specific plotly function, ggplotly(), can transform ggplot2 object plotly object, making previously made graphics interactive web based visualizations. However, showing directly create interactive graphics plotly using conveniently named plot_ly() function. Likewise graphics package functions, can input variables, colors, size, function. One small difference function wants specify type plot creating (.e. type = ‘bar’ bar chart), however, function fairly decent figuring type seems appropriate tell one. can helpful sure plot type best comparing certain variables, can see function defaults go . also allows add traces (using add_trace()) order compare multiple variables dataset. main benefit package others interactivity feature allows hover mouse plot gain intuitive understanding data.","code":""},{"path":"~fuzzybunnies/articles/trey-graphics-package.html","id":"the-data","dir":"Articles","previous_headings":"plotly Graphics Package","what":"The Data","title":"trey-graphics-package","text":"data using comes kaggle Data Card shown publicly available github. also available using fuzzybunnies R Package (called “marketing_data”). data customer characteristics unknown food company whether/accepted company’s ad campaign. contains customer characteristics income, marital status, number children home, education, purchasing habits, days customer, days since last purchase, etc. main variable interest many campaigns customer accepted, meaning many ad campaigns prompted customer buy unknown product. company released 6 ad campaigns data states whether customer accepted one (example AcceptedCmp1 = 1 accepted, 0 ). row also states many campaigns accepted variable AcceptedCmpOverall. exploring data using plotly, want see relationship customers’ characteristics likely accept ad campaign. Let’s take quick look data. wrangling “marketing_data”, changed name “market”:","code":"head(market) #> # A tibble: 6 × 5 #>   AcceptedCmpOverall Income Marital_Status Education  MntMeatProducts #>                <dbl>  <dbl> <fct>          <fct>                <dbl> #> 1                  0  58138 Single         Graduation             546 #> 2                  0  46344 Single         Graduation               6 #> 3                  0  71613 Together       Graduation             127 #> 4                  0  26646 Together       Graduation              20 #> 5                  0  58293 Married        PhD                    118 #> 6                  0  62513 Together       Master                  98"},{"path":"~fuzzybunnies/articles/trey-graphics-package.html","id":"introducing-plotly","dir":"Articles","previous_headings":"plotly Graphics Package","what":"Introducing plotly","title":"trey-graphics-package","text":"dataset shows information 2205 customers, let’s just see many accepted ad campaigns. , plotly needs data variable interest; factored categorical, number many campaigns accepted 0-6. fairly hard interpret instead giving us counts, adding bar individual accepted. Specifying bar work better especially count values data depending data pivoted; just play around . Like suggested earlier, let’s try specifying type see plotly . much better lot easier interpret. plotly knew exactly wanted, form warning, even told type seems appropriate. Clearly, customers accept ad campaigns, accepted one, less accepted two , etc. Check makes plotly better graphics packages. seems somewhere middle 1600 1800 customers accept ad campaigns, want exact number, plotly gives exactly , hover mouse first bar see 1747 customers accepted 0 ad campaigns. can bars. can see, also fairly easy add axes titles plotly, using pipe layout().","code":"plot_ly(market, x = ~factor(AcceptedCmpOverall), type = 'bar') %>%    layout(title = \"Ad Campaigns Accepted\",          xaxis = list(title = \"Number of Accepted Ad Campaigns Per Customer\"),          yaxis = list (title = \"Count\")) plot_ly(market, x = ~factor(AcceptedCmpOverall)) %>%    layout(title = \"Ad Campaigns Accepted\",          xaxis = list(title = \"Number of Accepted Ad Campaigns Per Customer\"),          yaxis = list (title = \"Count\")) #> No trace type specified: #>   Based on info supplied, a 'histogram' trace seems appropriate. #>   Read more about this trace type -> https://plotly.com/r/reference/#histogram"},{"path":"~fuzzybunnies/articles/trey-graphics-package.html","id":"exploring-more","dir":"Articles","previous_headings":"plotly Graphics Package","what":"Exploring More","title":"trey-graphics-package","text":"want see distribution customer incomes number campaigns accepted (0-4, looks like one accepted 5 6 campaigns). Let’s specify plotly putting Income y axis type ’box”, boxplots. Wow! seems income customer receives, ad campaigns accept. makes sense, customers make money can buy things. plot fairly useful , plotly takes next level. Hover mouse boxplots see exact median quartile values, well exact outlier values. makes easy compare data, graphic supposed . Let’s try specifying color categorical variable: slightly difficult interpret, overlapped. However, plotly’s interactivity makes plot super useful. can click boxplots want see, however many want time. actually provides useful insight data; double click “Married” box top right corner see income distributions customers married. Interestingly, income distribution slightly lower accepted 4 campaigns 3; divorced people, income much higher accepted 4 campaigns (click “Divorced” box see time, click “Married” one deselect ). One disadvantage plot see many customers make distribution. means values, saw earlier, many people accepted 4 campaigns overall causing discrepancy. Still, interactivity plotly provides makes interesting insights. Notice plotly provides several interactive options along top right plot. allows zoom , specify certain preferences, .","code":"plot_ly(market, x = ~factor(AcceptedCmpOverall), y = ~Income, type = 'box') %>%    layout(title = \"Distribution of Customer Incomes\",          xaxis = list(title = \"Number of Accepted Ad Campaigns Per Customer\"),          yaxis = list (title = \"Customer Income\")) plot_ly(market, x = ~factor(AcceptedCmpOverall), y = ~Income, color = ~Marital_Status, type = 'box') %>%    layout(title = \"Distribution of Customer Incomes by Marital Status\",          xaxis = list(title = \"Number of Accepted Ad Campaigns Per Customer\"),          yaxis = list (title = \"Customer Income\"))"},{"path":"~fuzzybunnies/articles/trey-graphics-package.html","id":"a-few-more-plots","dir":"Articles","previous_headings":"plotly Graphics Package","what":"A Few More Plots","title":"trey-graphics-package","text":"Let’s look number campaigns accepted comparison customers’ education levels. helpful show seem much disparity education comes number campaigns accepted. graph still useful quickly see many campaigns level education accepted. example, can see 76 people PhD’s accepted one ad campaign. Suppose company wants know customers’ income impacts number meat products buy many ad campaigns accepted. can create simple scatter plot income y axis number meat products bought x, color coordinated many campaigns accepted. Wow! seems lot people buy many meat products, almost , income 70k. think graph reveals us ad campaign probably little meat products many differences among amount accepted campaigns distribution meat products bought. However, seem important relationship income number meat products purchased. Notice plotly automatically sets mode markers. scatterplot need , plotly allows also change size markers scatterplots. useful want markers bigger smaller, want markers also represent variable size.","code":"plot_ly(market, x = ~factor(AcceptedCmpOverall), color = ~Education) %>%    layout(title = \"Ad Campaigns Accepted by Education\",          xaxis = list(title = \"Number of Accepted Ad Campaigns Per Customer\"),          yaxis = list (title = \"Count\")) #> No trace type specified: #>   Based on info supplied, a 'histogram' trace seems appropriate. #>   Read more about this trace type -> https://plotly.com/r/reference/#histogram plot_ly(market, x = ~MntMeatProducts, y = ~Income, color = ~factor(AcceptedCmpOverall), type = 'scatter') %>%    layout(title = \"Comparing Income and Meat Purchases by Number of Ad Campaigns Accepted\",          xaxis = list(title = \"Number of Meat Purchases\"),          yaxis = list (title = \"Income\")) #> No scatter mode specifed: #>   Setting the mode to markers #>   Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode"},{"path":"~fuzzybunnies/articles/trey-graphics-package.html","id":"conclusion","dir":"Articles","previous_headings":"plotly Graphics Package","what":"Conclusion","title":"trey-graphics-package","text":"Overall, plotly proves useful graphics package goes beyond packages. lot useful things plotly can , especially maps. Think helpful interactivity geographical map, can hover specific countries cities gain insightful information. glad learned plotly interactive visualizations often times useful, even , usually hurt interactive.","code":""},{"path":"~fuzzybunnies/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Trey Tipton. Author, maintainer. Trevor VanVeldhuisen. Author. Brent Gin. Author.","code":""},{"path":"~fuzzybunnies/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tipton T, VanVeldhuisen T, Gin B (2023). fuzzybunnies: Contains Function Working Dataframes R. R package version 0.0.0.9000.","code":"@Manual{,   title = {fuzzybunnies: Contains a Function for Working with Dataframes in R},   author = {Trey Tipton and Trevor VanVeldhuisen and Brent Gin},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"~fuzzybunnies/index.html","id":"fuzzybunnies","dir":"","previous_headings":"","what":"Contains a Function for Working with Dataframes in R","title":"Contains a Function for Working with Dataframes in R","text":"fuzzybunnies contains function called df_apply() applies function data frame. expects data frame, function, another function filters columns data frame want apply given function .","code":""},{"path":"~fuzzybunnies/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Contains a Function for Working with Dataframes in R","text":"can install development version fuzzybunnies GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"treytipton4/fuzzybunnies\")"},{"path":"~fuzzybunnies/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Contains a Function for Working with Dataframes in R","text":"basic example shows apply floor() function numeric columns data frame using df_apply(): example applies existing R command, floor(), xyz dataframe - applying numeric columns. floor function rounds numbers nearest integer, thus, using df_apply(), y z columns remain x column changed values 1, 2, 3. Let’s watch work Package Website Package created Trey Tipton, Trevor VanVeldhuisen, Brent Gin","code":"library(fuzzybunnies)  head(xyz_fuzzybunnies) #>     x y     z #> 1 1.1 4 Hello #> 2 2.5 5    Hi #> 3 3.9 6   Hey new_xyz <- df_apply(xyz_fuzzybunnies, floor, is.numeric)  head(new_xyz) #>   x y     z #> 1 1 4 Hello #> 2 2 5    Hi #> 3 3 6   Hey"},{"path":"~fuzzybunnies/reference/aatemp.html","id":null,"dir":"Reference","previous_headings":"","what":"Annual mean temperatures in Ann Arbor, Michigan — aatemp","title":"Annual mean temperatures in Ann Arbor, Michigan — aatemp","text":"Comes U.S. Historical Climatology Network","code":""},{"path":"~fuzzybunnies/reference/aatemp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annual mean temperatures in Ann Arbor, Michigan — aatemp","text":"","code":"aatemp"},{"path":[]},{"path":"~fuzzybunnies/reference/aatemp.html","id":"aatemp","dir":"Reference","previous_headings":"","what":"aatemp","title":"Annual mean temperatures in Ann Arbor, Michigan — aatemp","text":"data frame 115 rows 2 columns: year Year temp Temperature degrees F Ann Arbor","code":""},{"path":"~fuzzybunnies/reference/aatemp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Annual mean temperatures in Ann Arbor, Michigan — aatemp","text":"package \"faraway\"","code":""},{"path":"~fuzzybunnies/reference/bank_failures.html","id":null,"dir":"Reference","previous_headings":"","what":"Bank Data — bank_failures","title":"Bank Data — bank_failures","text":"Bank failure data","code":""},{"path":"~fuzzybunnies/reference/bank_failures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bank Data — bank_failures","text":"","code":"bank_failures"},{"path":[]},{"path":"~fuzzybunnies/reference/bank_failures.html","id":"aatemp","dir":"Reference","previous_headings":"","what":"aatemp","title":"Bank Data — bank_failures","text":"data frame 115 rows 2 columns: CERT cert CHCLASS1 chclass","code":""},{"path":"~fuzzybunnies/reference/bank_failures.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Bank Data — bank_failures","text":"Trevor's files","code":""},{"path":"~fuzzybunnies/reference/candydata.html","id":null,"dir":"Reference","previous_headings":"","what":"Candy Data — candydata","title":"Candy Data — candydata","text":"Candy Data data","code":""},{"path":"~fuzzybunnies/reference/candydata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Candy Data — candydata","text":"","code":"candydata"},{"path":[]},{"path":"~fuzzybunnies/reference/candydata.html","id":"aatemp","dir":"Reference","previous_headings":"","what":"aatemp","title":"Candy Data — candydata","text":"data frame ?? rows ? columns: CERT cert CHCLASS1 chclass","code":""},{"path":"~fuzzybunnies/reference/candydata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Candy Data — candydata","text":"github","code":""},{"path":"~fuzzybunnies/reference/df_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to columns of a dataset — df_apply","title":"Apply a function to columns of a dataset — df_apply","text":"Apply function columns dataset","code":""},{"path":"~fuzzybunnies/reference/df_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to columns of a dataset — df_apply","text":"","code":"df_apply(.data, .fun, .filter, ...)"},{"path":"~fuzzybunnies/reference/df_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to columns of a dataset — df_apply","text":".data dataframe .fun function can applied column data frame return column data frame .filter function filters columns apply function returns logical (TRUE FALSE), .fun applied columns return TRUE ... additional parameters passed .fun","code":""},{"path":"~fuzzybunnies/reference/df_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to columns of a dataset — df_apply","text":"modified dataframe","code":""},{"path":"~fuzzybunnies/reference/df_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to columns of a dataset — df_apply","text":"","code":"#apply increment function to a dataframe called df_fuzzybunnies, but only for the numeric columns  increment <- function(x) {   return(x + 5) }  df_apply(df_fuzzybunnies, increment, is.numeric) #>    Name Age #> 1   Jon  28 #> 2  Bill  46 #> 3 Maria  37 #> 4   Ben  63 #> 5  Tina  31  # apply str_trunc function to a dataframe # keeping only the first letter (and ellipses) of the days of the week # and only applying to character columns  library(stringr)  xy_days_of_week <- data.frame(x = c(1,2,3,4,5,6,7), y = c('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'))  df_apply(xy_days_of_week, str_trunc, is.character, width = 4) #>   x    y #> 1 1 S... #> 2 2 M... #> 3 3 T... #> 4 4 W... #> 5 5 T... #> 6 6 F... #> 7 7 S..."},{"path":"~fuzzybunnies/reference/df_fuzzybunnies.html","id":null,"dir":"Reference","previous_headings":"","what":"Second data frame in the fuzzybunnies package — df_fuzzybunnies","title":"Second data frame in the fuzzybunnies package — df_fuzzybunnies","text":"Basic data used test function df_apply()","code":""},{"path":"~fuzzybunnies/reference/df_fuzzybunnies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Second data frame in the fuzzybunnies package — df_fuzzybunnies","text":"","code":"df_fuzzybunnies"},{"path":[]},{"path":"~fuzzybunnies/reference/df_fuzzybunnies.html","id":"df-fuzzybunnies","dir":"Reference","previous_headings":"","what":"df_fuzzybunnies","title":"Second data frame in the fuzzybunnies package — df_fuzzybunnies","text":"data frame 5 rows 2 columns: Name list names Age list ages","code":""},{"path":"~fuzzybunnies/reference/df_fuzzybunnies.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Second data frame in the fuzzybunnies package — df_fuzzybunnies","text":"Brent created R","code":""},{"path":"~fuzzybunnies/reference/diamond_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Diamond Data — diamond_data","title":"Diamond Data — diamond_data","text":"Data diamond statistics pricing","code":""},{"path":"~fuzzybunnies/reference/diamond_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diamond Data — diamond_data","text":"","code":"diamond_data"},{"path":[]},{"path":"~fuzzybunnies/reference/diamond_data.html","id":"diamond-data","dir":"Reference","previous_headings":"","what":"diamond_data","title":"Diamond Data — diamond_data","text":"Data frame 53940 rows 7 columns carat Unit Weight cut Classification Current Quality color Color Grade clarity Opaqueness depth Thickness Diamond table Largest face Diamond price Total Sell Price","code":""},{"path":"~fuzzybunnies/reference/diamond_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Diamond Data — diamond_data","text":"Github Collection","code":""},{"path":"~fuzzybunnies/reference/marketing_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Marketing data from kaggle — marketing_data","title":"Marketing data from kaggle — marketing_data","text":"public github dataset contains marketing data unknown food company","code":""},{"path":"~fuzzybunnies/reference/marketing_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marketing data from kaggle — marketing_data","text":"","code":"marketing_data"},{"path":[]},{"path":"~fuzzybunnies/reference/marketing_data.html","id":"marketing-data","dir":"Reference","previous_headings":"","what":"marketing_data","title":"Marketing data from kaggle — marketing_data","text":"data frame 2,205 rows 39 columns: Income list particpant incomes Kidhome 1 Kid home, 0 Teen 1 Teen home, 0 ","code":""},{"path":"~fuzzybunnies/reference/marketing_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Marketing data from kaggle — marketing_data","text":"https://raw.githubusercontent.com/nailson/ifood-data-business-analyst-test/master/ifood_df.csv","code":""},{"path":"~fuzzybunnies/reference/xyz_fuzzybunnies.html","id":null,"dir":"Reference","previous_headings":"","what":"First data frame in the fuzzybunnies package — xyz_fuzzybunnies","title":"First data frame in the fuzzybunnies package — xyz_fuzzybunnies","text":"Basic data used test function df_apply()","code":""},{"path":"~fuzzybunnies/reference/xyz_fuzzybunnies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"First data frame in the fuzzybunnies package — xyz_fuzzybunnies","text":"","code":"xyz_fuzzybunnies"},{"path":[]},{"path":"~fuzzybunnies/reference/xyz_fuzzybunnies.html","id":"xyz-fuzzybunnies","dir":"Reference","previous_headings":"","what":"xyz_fuzzybunnies","title":"First data frame in the fuzzybunnies package — xyz_fuzzybunnies","text":"data frame 3 rows 3 columns: x values y values z strings","code":""},{"path":"~fuzzybunnies/reference/xyz_fuzzybunnies.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"First data frame in the fuzzybunnies package — xyz_fuzzybunnies","text":"Trey created R","code":""}]
